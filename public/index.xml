<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Minjun Jeon</title>
    <link>https://www.minjunjeon.com/</link>
    <description>Recent content on Minjun Jeon</description>
    <image>
      <title>Minjun Jeon</title>
      <url>https://www.minjunjeon.com/assets/android-chrome-512x512.png</url>
      <link>https://www.minjunjeon.com/assets/android-chrome-512x512.png</link>
    </image>
    <generator>Hugo -- 0.147.5</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.minjunjeon.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL 13. Grouping Sets, Rollups, and Self-Joins</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql13/</link>
      <pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql13/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In SQL interviews, understanding advanced grouping and join techniques is crucial. This post dives into &lt;code&gt;GROUPING SETS&lt;/code&gt;, &lt;code&gt;ROLLUP&lt;/code&gt;, &lt;code&gt;CUBE&lt;/code&gt;, and types of joins like self-joins, &lt;code&gt;CROSS JOIN&lt;/code&gt;, and &lt;code&gt;NATURAL JOIN&lt;/code&gt;. We also touch on how to interpret &lt;code&gt;NULL&lt;/code&gt;s in grouping results and share interview tips along the way.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-grouping-sets&#34;&gt;1. GROUPING SETS&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;GROUPING SETS&lt;/code&gt; let you define multiple &lt;code&gt;GROUP BY&lt;/code&gt; combinations in a single query—ideal for multi-dimensional reports.&lt;/p&gt;
&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;
&lt;p&gt;You want to calculate:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 13. Grouping sets, rollups, self-joins</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql13_original/</link>
      <pubDate>Wed, 11 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql13_original/</guid>
      <description>&lt;h2 id=&#34;1-gropuing-sets&#34;&gt;1. GROPUING SETS&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;GROUPING SETS&lt;/code&gt; allows us to define all of the combinations that our data should be grouped by in one query. For example, let&amp;rsquo;s say we want to get the revenue obtained by each staff for each month, revenue obtained for each month, and the revenue obtained by each staff for the entire database in one table. These are combinations of many &lt;code&gt;GROUP BY&lt;/code&gt;&amp;rsquo;s with different columns. This can certainly be achieved by using multiple &lt;code&gt;GROPU BY&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;UNION&lt;/code&gt;&amp;rsquo;s. For the above example, one can execute the following code:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 12. Window Functions</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql12/</link>
      <pubDate>Mon, 09 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql12/</guid>
      <description>&lt;p&gt;Window functions in PostgreSQL allow you to perform calculations across sets of rows &lt;strong&gt;related to the current row&lt;/strong&gt;, without collapsing rows like &lt;code&gt;GROUP BY&lt;/code&gt; does. They’re essential for solving ranking, running totals, moving averages, and row-by-row comparisons.&lt;/p&gt;
&lt;p&gt;This post reviews key window functions with practical, interview-friendly examples.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-over-partition-by-&#34;&gt;1. &lt;code&gt;OVER (PARTITION BY ...)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Window functions let you run aggregations &lt;strong&gt;without reducing the number of rows&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A correlated subquery alternative:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-postgresql&#34; data-lang=&#34;postgresql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  transaction_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  payment_type,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  customer_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  price_in_transaction,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; SUM(price_in_transaction)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; sales s2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; s1&lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;customer_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s2&lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;customer_id) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; total_by_customer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; sales s1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works but is inefficient. Instead, use:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 11. Views &amp; Data Manipulation</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql11/</link>
      <pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql11/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re prepping for a SQL or data engineering interview, it’s essential to be fluent not only in writing queries but also in understanding the impact of commands like &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, and views (both virtual and materialized). This post covers practical examples and deepens your understanding of data manipulation and view management in PostgreSQL.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-update-modifying-existing-rows&#34;&gt;1. &lt;code&gt;UPDATE&lt;/code&gt;: Modifying Existing Rows&lt;/h2&gt;
&lt;p&gt;To modify data in a table, use the &lt;code&gt;UPDATE&lt;/code&gt; statement. Here&amp;rsquo;s the general syntax:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 10. Managing Tables &amp; Databases</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql10/</link>
      <pubDate>Fri, 06 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql10/</guid>
      <description>&lt;p&gt;In previous posts, we focused on querying tables. In this post, we’ll explore &lt;strong&gt;data definition&lt;/strong&gt; in SQL: how to create, modify, and delete database objects like tables, constraints, and databases themselves.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mastering these operations shows that you not only know how to &lt;em&gt;query&lt;/em&gt; data, but also how to &lt;em&gt;design&lt;/em&gt; and &lt;em&gt;manage&lt;/em&gt; the structures that hold it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We&amp;rsquo;ll cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data types&lt;/li&gt;
&lt;li&gt;Constraints&lt;/li&gt;
&lt;li&gt;Primary and foreign keys&lt;/li&gt;
&lt;li&gt;Creating and altering tables and databases&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;ll cover &lt;strong&gt;views&lt;/strong&gt;, &lt;strong&gt;indexes&lt;/strong&gt;, and &lt;strong&gt;data manipulation (INSERT, UPDATE, DELETE)&lt;/strong&gt; in separate posts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. Python: map</title>
      <link>https://www.minjunjeon.com/posts/software_eng/python/python_concepts/python1/</link>
      <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/software_eng/python/python_concepts/python1/</guid>
      <description>&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; function applies a given function to all items in an input list (or any other iterable) and returns a map object (an iterator). This is particularly useful for transforming data in a list comprehensively.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An iterable is any python object:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;capable of returning its members one at a time, permitting it to be iterated over in a for-loop.&lt;/li&gt;
&lt;li&gt;implements &lt;code&gt;__iter__&lt;/code&gt; method, which returns an iterator, or &lt;code&gt;__getitem__&lt;/code&gt; method suitable for indexed lookup.&lt;/li&gt;
&lt;li&gt;The examples are &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An iterator is an object that:&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. Array/List</title>
      <link>https://www.minjunjeon.com/posts/ds_algo/theory/theory2/</link>
      <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/ds_algo/theory/theory2/</guid>
      <description>&lt;p&gt;Arrays, more commonly known as &lt;strong&gt;lists&lt;/strong&gt; in Python, are one of the most fundamental and widely used data structures. They store items in a sequential, ordered manner, and support a wide range of operations efficiently.&lt;/p&gt;
&lt;p&gt;This post is designed as a refresher for interviews or technical review, with code examples, time complexity analysis, and clarifications on memory behavior.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-what-is-an-array-list&#34;&gt;1. What is an Array (List)?&lt;/h2&gt;
&lt;p&gt;In Python, the built-in &lt;code&gt;list&lt;/code&gt; type is a &lt;strong&gt;dynamic array&lt;/strong&gt; implementation. Arrays:&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. Python: filter</title>
      <link>https://www.minjunjeon.com/posts/software_eng/python/python_concepts/python2/</link>
      <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/software_eng/python/python_concepts/python2/</guid>
      <description>&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; function constructs an iterator from elements of an iterable for which a function returns &lt;code&gt;true&lt;/code&gt;. It is used to filter out items from a list (or any other iterable) based on a condition.&lt;/p&gt;
&lt;p&gt;The syntax is similar to &lt;a href=&#34;https://www.minjunjeon.com/posts/software_eng/python/python_concepts/python1&#34;&gt;map&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filter(func1, iterable)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)] &lt;span style=&#34;color:#75715e&#34;&gt;# [1, ..., 12] &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(list(filter(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, num_list)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# output: [2, 4, 6, 8, 10, 12 ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can filter with multiple conditions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)] &lt;span style=&#34;color:#75715e&#34;&gt;#[1,2,...,9]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;even_and_greater_than_five &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(filter(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, num_list))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(even_and_greater_than_five) &lt;span style=&#34;color:#75715e&#34;&gt;# output: [6, 8]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can perform filter operation on dictionaries:&lt;/p&gt;</description>
    </item>
    <item>
      <title>3. Custom Package and __init__.py</title>
      <link>https://www.minjunjeon.com/posts/software_eng/python/python_concepts/python3/</link>
      <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/software_eng/python/python_concepts/python3/</guid>
      <description>&lt;p&gt;We can install packages from the Python Package Index (PyPI) through pip(PyPI Install Packages). Furthermore, we can import these through &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But &amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;how can we create our custom package?
Let&amp;rsquo;s walk through how to structure a custom Python package, add subpackages, the roles of &lt;code&gt;__init__.py&lt;/code&gt; and how to publish the custom package to &lt;a href=&#34;https://pypi.org/&#34;&gt;PyPI&lt;/a&gt;. Additionally, we look at setting up dependencies and version management using &lt;a href=&#34;https://python-poetry.org/&#34;&gt;Poetry&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;1-basic-package-structure&#34;&gt;1. Basic Package Structure&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we want to build a simple package named &lt;code&gt;mypackage&lt;/code&gt;. Here is a minimal project structure:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big Data 6. Slowly Changing Dimensions (SCD)</title>
      <link>https://www.minjunjeon.com/posts/data_eng/bd/bd6/</link>
      <pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/bd/bd6/</guid>
      <description>&lt;h2 id=&#34;slowly-changing-dimensions-scd&#34;&gt;Slowly Changing Dimensions (SCD)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Slowly Changing Dimensions (SCDs)&lt;/strong&gt; refer to attributes in a data warehouse dimension table that change infrequently—yet unpredictably—over time. When a source system updates a dimension attribute, we need a strategy to decide how that change will be reflected (or not) in the data warehouse. In some cases, storing historical values isn’t necessary; in others, retaining a full history is critical for reporting, auditing, or trend analysis.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big Data 3. Data Warehouses, Data Lakes, and Lake Houses</title>
      <link>https://www.minjunjeon.com/posts/data_eng/bd/bd3/</link>
      <pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/bd/bd3/</guid>
      <description>&lt;h2 id=&#34;1-data-warehouses&#34;&gt;1. Data Warehouses&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;Data Warehouse (DW)&lt;/em&gt; is a centralized repository that aggregates data from multiple sources into a unified, consistent store optimized for analytics and business intelligence (BI) activities, such as reporting, forecasting, and data mining.&lt;/p&gt;
&lt;p&gt;Unlike transactional databases (OLTP), data warehouses are built for &lt;strong&gt;analytical workloads (OLAP)&lt;/strong&gt;: they support complex queries over large volumes of data, often using denormalized schemas, dimensions, and facts for performance.&lt;/p&gt;
&lt;p&gt;Data warehouses typically use:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big Data 4. Denormalized Schema in Data Warehouses</title>
      <link>https://www.minjunjeon.com/posts/data_eng/bd/bd4/</link>
      <pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/bd/bd4/</guid>
      <description>&lt;h4 id=&#34;1-denormalized-schema&#34;&gt;1. Denormalized Schema&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;denormalized schema&lt;/strong&gt; is a database design that reduces the number of joins by &lt;strong&gt;combining related data into fewer tables&lt;/strong&gt;, often at the expense of some redundancy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Optimized for read-heavy analytical workloads&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Not ideal for OLTP systems (which benefit from normalization)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a typical data warehouse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data is modeled to &lt;strong&gt;maximize query performance&lt;/strong&gt; and &lt;strong&gt;simplify analytics&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;This contrasts with normalized schemas used in transactional databases, where the goal is data integrity and avoiding redundancy.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-star-and-snowflake-schemas&#34;&gt;2. Star and Snowflake Schemas&lt;/h4&gt;
&lt;p&gt;Two common denormalized designs are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big Data 5. Modern Data Stack</title>
      <link>https://www.minjunjeon.com/posts/data_eng/bd/bd5/</link>
      <pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/bd/bd5/</guid>
      <description>&lt;p&gt;As the cost of cloud storage and compute continues to fall and internet speeds rise, data engineers are rethinking how data is stored, processed, and analyzed. This shift has led to what we now call the &lt;strong&gt;modern data stack&lt;/strong&gt;: a flexible, scalable, cloud-native approach that replaces traditional monolithic systems.&lt;/p&gt;
&lt;p&gt;In this post, we’ll explore key architectural changes that enabled the modern data stack, from the transition from &lt;strong&gt;SMP to MPP&lt;/strong&gt;, to the &lt;strong&gt;decoupling of storage and compute&lt;/strong&gt;, and the rise of &lt;strong&gt;columnar databases&lt;/strong&gt;, &lt;strong&gt;ELT workflows&lt;/strong&gt;, and the &lt;strong&gt;tooling ecosystem&lt;/strong&gt; that glues it all together.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big Data 1. Data Maturity Model</title>
      <link>https://www.minjunjeon.com/posts/data_eng/bd/bd1/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/bd/bd1/</guid>
      <description>&lt;h2 id=&#34;1-intro&#34;&gt;1. Intro&lt;/h2&gt;
&lt;p&gt;The Maslow&amp;rsquo;s hierarchy of needs models the basic needs of humans as a hierarchy of 5 levels from the bottom to higher-level needs at the top. In this model, one cannot proceed to the next level unless the basic needs of the current level is met.&lt;/p&gt;
&lt;p&gt;Silmiarly, one can think of &lt;em&gt;data hierarchy of needs&lt;/em&gt;. The 5 levels are &lt;strong&gt;Data Collection, Data Wrangling, Data Integration, BI and Analytics, and Artificail Intellgence.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Big Data 2. OLTP vs OLAP</title>
      <link>https://www.minjunjeon.com/posts/data_eng/bd/bd2/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/bd/bd2/</guid>
      <description>&lt;p&gt;When working with databases, it&amp;rsquo;s essential to distinguish between two fundamental system types: &lt;strong&gt;OLTP (Online Transaction Processing)&lt;/strong&gt; and &lt;strong&gt;OLAP (Online Analytical Processing)&lt;/strong&gt;. These systems serve very different purposes and are optimized accordingly.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;oltp--online-transaction-processing&#34;&gt;OLTP — Online Transaction Processing&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;OLTP&lt;/strong&gt; systems are designed to handle a large number of &lt;strong&gt;short, atomic transactions&lt;/strong&gt; such as inserts, updates, and deletes. They are optimized for &lt;strong&gt;speed and reliability&lt;/strong&gt; in transactional environments.&lt;/p&gt;
&lt;h4 id=&#34;example-use-cases&#34;&gt;Example Use Cases&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Banking systems&lt;/li&gt;
&lt;li&gt;E-commerce checkout&lt;/li&gt;
&lt;li&gt;Inventory management&lt;/li&gt;
&lt;li&gt;Booking/reservation systems&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;custom-table-wrapper&#34;&gt;
    &lt;table&gt;
      &lt;h4 id=&#34;characteristics&#34;&gt;Characteristics&lt;/h4&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Feature&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;OLTP&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Main Use&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Day-to-day operations (CRUD)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Queries&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Simple and frequent&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Data Volume&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Current data (live, real-time)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Users&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Many concurrent users&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Schema&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Highly normalized&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Transactions&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Short and fast&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Performance Goal&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;High throughput and low latency&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Storage Type&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Primarily Row-based&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ACID Compliance&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Fully ACID-compliant&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

    &lt;/table&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is ACID?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 9. Union and Subqueries</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql9/</link>
      <pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql9/</guid>
      <description>&lt;h2 id=&#34;1-unionunion-all&#34;&gt;1. UNION/UNION ALL&lt;/h2&gt;
&lt;p&gt;In contrast to &lt;a href=&#34;https://www.minjunjeon.com/posts/data_eng/sql/sql8&#34;&gt;&lt;em&gt;JOINS&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;UNION&lt;/em&gt; combines rows instead of columns.&lt;/p&gt;
&lt;h3 id=&#34;a-basic-syntax&#34;&gt;a) Basic Syntax&lt;/h3&gt;
&lt;p&gt;The syntax is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; column_name1, column_name2 &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_name1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; column_name3, column_name4 &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_name2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The number of columns from the first table should match the number of columns from the second table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Columns are matched by the order. For example &lt;code&gt;column_name1&lt;/code&gt; and &lt;code&gt;column_name3&lt;/code&gt; don&amp;rsquo;t need to be identitcal. The merged table will have column names of the first table, i.e. &lt;code&gt;column_name1&lt;/code&gt; and &lt;code&gt;column_name2&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. Big O asymptotic analysis</title>
      <link>https://www.minjunjeon.com/posts/ds_algo/theory/theory1/</link>
      <pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/ds_algo/theory/theory1/</guid>
      <description>&lt;h2 id=&#34;1-what-is-good-code&#34;&gt;1. What is good code?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Readability : How easily humans can understand, modify, and maintain a piece of code.&lt;/li&gt;
&lt;li&gt;Scalability: How well the code can handle increased load and complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Big O&lt;/em&gt;, a shorthand for &lt;em&gt;Big O asymptotic analysis&lt;/em&gt;, measures the scalability of code. Scalability consists of runtime and memory. There is usally a trade-off between runtime and memory. In this post, we introduce the Big O notation in terms of runtime and look at how to measure the space complexity of an algorithm at the end.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 8. Joins</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql8/</link>
      <pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql8/</guid>
      <description>&lt;p&gt;&lt;code&gt;JOIN&lt;/code&gt; is used to combine information from multiple tables in one query. There are four types of &lt;code&gt;JOIN&lt;/code&gt;s: &lt;code&gt;INNER JOIN&lt;/code&gt;, &lt;code&gt;OUTER JOIN&lt;/code&gt;, &lt;code&gt;LEFT JOIN&lt;/code&gt;, and &lt;code&gt;RIGHT JOIN&lt;/code&gt;. When combining two tables, you need one common column, so called reference column or join column.&lt;/p&gt;
&lt;h2 id=&#34;1-inner-join&#34;&gt;1. INNER JOIN&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;INNER JOIN&lt;/em&gt; combines two tables only for the rows where the value in the join column occurs in both tables.&lt;/p&gt;
&lt;p&gt;If there are &lt;code&gt;m&lt;/code&gt; matching rows in the first table and &lt;code&gt;n&lt;/code&gt; matching rows in the second table for the join column value, the result will contain &lt;code&gt;m × n&lt;/code&gt; rows for that value.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 4. String Functions</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql4/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql4/</guid>
      <description>&lt;p&gt;In this post, we are going to look at basic string functions in SQL.&lt;/p&gt;
&lt;h2 id=&#34;1-upper-lower-length&#34;&gt;1. UPPER, LOWER, LENGTH&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;UPPER&lt;/em&gt; changes all lowercase alphabets to uppercase. &lt;em&gt;LOWER&lt;/em&gt; changes all uppercase letters to lowercase. Finally, &lt;em&gt;LENGTH&lt;/em&gt; gives the number of characters. The example is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPPER&lt;/span&gt;(first_name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;LOWER&lt;/span&gt;(last_name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; customer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LENGTH&lt;/span&gt;(first_name) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code outputs the first names in uppercase and last names in lowercase from the table &lt;code&gt;customer&lt;/code&gt; where the length of the first name is more than &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 5. Date and Time Functions</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql5/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql5/</guid>
      <description>&lt;p&gt;In this post, we are going to look at basic date and time functions in SQL. Before we dive deeper into the date and time functions, let&amp;rsquo;s look at standard date/time types.&lt;/p&gt;
&lt;h3 id=&#34;0-datatime-types&#34;&gt;0. Data/Time types&lt;/h3&gt;
&lt;div class=&#34;custom-table-wrapper&#34;&gt;
    &lt;table&gt;
      &lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Types&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Description&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Examples&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;date&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Just date &lt;br&gt; without time&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;2025-06-01&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;time &lt;br&gt; (with/without time zone)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Just time &lt;br&gt; without date&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;01:02:03.678+02&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;timestamp &lt;br&gt; (with/without time zone)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Date and time&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;2022-11-28 01:02:03.678+02&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;intervals&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Time interval&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;3 days 01:02:03.678&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

    &lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;1-extract&#34;&gt;1. EXTRACT&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;EXTRACT&lt;/em&gt; is used to extract parts of timestamp/date. The syntax is as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 6. Numerical Functions and Operators</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql6/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql6/</guid>
      <description>&lt;h2 id=&#34;1-operators&#34;&gt;1. Operators&lt;/h2&gt;
&lt;div class=&#34;custom-table-wrapper&#34;&gt;
    &lt;table&gt;
      &lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Operator&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Description&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Examples&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;+&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;addition&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4+3&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;7&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;-&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;subtraction&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;5-3&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;*&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;multiplication&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;4*2&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;/&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;division (integer division truncates the result)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;8/4&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;%&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;modulo (remainder)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;10%4&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;^&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;exponentiation&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2^3&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;For example, &lt;code&gt;9/4&lt;/code&gt; will give &lt;code&gt;2&lt;/code&gt; while &lt;code&gt;9.0/4&lt;/code&gt; will give &lt;code&gt;2.2500...00&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-functions&#34;&gt;2. Functions&lt;/h2&gt;
&lt;div class=&#34;custom-table-wrapper&#34;&gt;
    &lt;table&gt;
      &lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Function&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Description&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Examples&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Result&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;abs(x)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;absolute value&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;abs(-2)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;round(x, d)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;round x to d decimal places&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;round(7.4632, 2)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;7.46&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ceiling(x)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;round up to integer&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ceiling(7.4632)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;floor(x)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;round down to integer&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;floor(7.4632)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;7&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

    &lt;/table&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>SQL 7. Conditional Expressions</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql7/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql7/</guid>
      <description>&lt;p&gt;Here, we go through conditional expressions.&lt;/p&gt;
&lt;h2 id=&#34;1-case-when&#34;&gt;1. CASE WHEN&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;CASE WHEN&lt;/em&gt; goes through a set of conditions and returns a value if a condition is met. The syntax is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; condition1 &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; result1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; condition2 &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; result2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; conditionN &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; resultN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start the statement with &lt;code&gt;CASE&lt;/code&gt; and &lt;strong&gt;end with &lt;code&gt;END&lt;/code&gt;&lt;/strong&gt;. In between, the statement has conditions and results. If multiple conditions are met, the result of the highest priority is returned. For example, if both &lt;code&gt;condition1&lt;/code&gt; and &lt;code&gt;condition2&lt;/code&gt; are true, only &lt;code&gt;result1&lt;/code&gt; will be returned. If there is no &lt;code&gt;ELSE&lt;/code&gt; statement, and all the conditions after &lt;code&gt;WHEN&lt;/code&gt; are not met, &lt;code&gt;NULL&lt;/code&gt; is returned.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 3. Grouping</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql3/</link>
      <pubDate>Sat, 31 May 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql3/</guid>
      <description>&lt;p&gt;Here we go through other basic SQL commands for grouping:&lt;/p&gt;
&lt;h2 id=&#34;1-aggregate-functions&#34;&gt;1. Aggregate Functions&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Aggregate functions&lt;/em&gt; aggregate values in multiple rows to one value. &lt;code&gt;COUNT&lt;/code&gt; in &lt;a href=&#34;https://www.minjunjeon.com/posts/data_eng/sql/sql1/#6-count&#34;&gt;SQL 1. Basics&lt;/a&gt; is one of aggregate functions. Here are commonly used aggregate functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SUM()&lt;/li&gt;
&lt;li&gt;AVG()&lt;/li&gt;
&lt;li&gt;MIN()&lt;/li&gt;
&lt;li&gt;MAX()&lt;/li&gt;
&lt;li&gt;COUNT()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The examples are as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SUM&lt;/span&gt;(column_name1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_name1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You usually need to specify the column name inside the parentheses. &lt;code&gt;COUNT&lt;/code&gt; accepts &lt;code&gt;*&lt;/code&gt;. &lt;em&gt;Aggregate functions&lt;/em&gt; cannot be used with other columns that are not aggregated. This is because aggregation results in only one value while other columns may have multiple values. Thus, the syntax below is not possible:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 2. Filtering</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql2/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql2/</guid>
      <description>&lt;p&gt;Here we go through other basic SQL commands for filtering:&lt;/p&gt;
&lt;h2 id=&#34;1-where&#34;&gt;1. WHERE&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;WHERE&lt;/em&gt; is used to filter the data in the output. It always comes after FROM. The syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;column_name1, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;column_name2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_name1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; condition
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, we can filter out all columns where the amount is &lt;code&gt;10.99&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; payment
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; amount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Furthermore, we can filter out certain columns.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;first_name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;last_name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; customer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; first_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ADAM&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enclose the texts around &lt;code&gt;&#39;&lt;/code&gt;.
We can use other operators to filter the data, e.g. &lt;code&gt;&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt; or &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intro to SQL</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql_intro/</link>
      <pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql_intro/</guid>
      <description>&lt;h2 id=&#34;1-sql&#34;&gt;1. SQL&lt;/h2&gt;
&lt;p&gt;SQL stands for structured query language. It is a language to interact with &lt;em&gt;databases&lt;/em&gt;.
&lt;em&gt;Database&lt;/em&gt; is an organized collection of structured information, or data, typically stored electronically in a computer system.
Database consists of schemas, which are a collection of tables and help structuring the database.
Database is managed by Database Management Systems(DBMS). One example of DMBS is PostgreSQL.&lt;/p&gt;
&lt;h3 id=&#34;a-dialects-of-sql&#34;&gt;a) Dialects of SQL&lt;/h3&gt;
&lt;p&gt;All DMBS&amp;rsquo;s have slightly different dialects even though the differences are small. Among all DMBS&amp;rsquo;s, PostgreSQL is a good place to start because&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL 1. Basics</title>
      <link>https://www.minjunjeon.com/posts/data_eng/sql/sql1/</link>
      <pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/posts/data_eng/sql/sql1/</guid>
      <description>&lt;p&gt;Here, we go through basic SQL commands:&lt;/p&gt;
&lt;h2 id=&#34;1-select&#34;&gt;1. SELECT&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;SELECT&lt;/em&gt; is used to select and return data.
For a single column, the syntax is as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;column_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_name1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For multiple columns, you just list the column names with &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;column_name1,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;column_name2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_name1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To select all columns, use &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; table_name1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that &lt;strong&gt;the exact format doesn&amp;rsquo;t matter&lt;/strong&gt;, e.g. the two examples are the same:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://www.minjunjeon.com/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/contact/</guid>
      <description>&lt;style&gt;
    #theme-toggle,
    .top-link {
        display: none;
    }
         
    @import url(&#34;https://fonts.googleapis.com/css2?family=Figtree:ital,wght@0,300..900;1,300..900&amp;family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;display=swap&#34;);

    /** Variables **/

    :root {
    --color-background: #e7e7e7;
    --color-background-alt: #888888;
    --color-border-active: #da7105;
    --color-border-default: #d1d1d1;
    --color-highlight: #fdcf4c;
    --color-primary: #b64e08;
    --color-primary-active: #79320e;
    --color-text-default: #262626;
    --color-text-muted: #4f4f4f;

    --font-family-body: &#34;Figtree&#34;, system-ui, sans-serif;
    --font-family-display: &#34;Poppins&#34;, system-ui, sans-serif;
    }

    /** Base **/

    *,
    ::before,
    ::after {
    box-sizing: border-box;
    }

    * {
    border: 0;
    margin: 0;
    padding: 0;
    }

    body {
    -webkit-font-smoothing: antialiased;
    font-family: var(--font-family-body);
    font-optical-sizing: auto;
    font-style: normal;
    }

    button,
    input,
    optgroup,
    select,
    textarea {
    font-family: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    font-size: 100%;
    font-weight: inherit;
    line-height: inherit;
    color: inherit;
    margin: 0;
    padding: 0;
    }

    [type=&#34;checkbox&#34;],
    [type=&#34;radio&#34;],
    [type=&#34;range&#34;] {
    appearance: none;
    flex-shrink: 0;
    padding: 0;
    user-select: none;
    }

    [type=&#34;checkbox&#34;]:focus,
    [type=&#34;radio&#34;]:focus,
    [type=&#34;range&#34;]:focus {
    outline: none;
    }

    /** Components **/

    .fs-form {
    display: grid;
    row-gap: 1.5rem;
    }

    .fs-form:where(.fs-layout__2-column) {
    column-gap: 1.5rem;
    grid-template-columns: 1fr 1fr;
    }

    fieldset {
    display: grid;
    margin: 1.5rem 0;
    row-gap: 1.5rem;
    }

    .fs-form:where(.fs-layout__2-column) fieldset {
    column-gap: 1.5rem;
    grid-template-columns: 1fr 1fr;
    grid-column: 1 / -1;
    }

    .fs-fieldset-title {
    color: var(--color-text-header);
    font-family: var(--font-family-display);
    font-size: 1.25rem;
    line-height: 1.75rem;
    margin-bottom: 1.5rem;
    grid-column: 1 / -1;
    }

    .fs-field {
    display: flex;
    flex-direction: column;
    row-gap: 0.5rem;
    }

    .fs-label {
    color: var(--color-text-default);
    display: block;
    font-family: var(--font-family-display);
    font-size: 1rem;
    line-height: 1.25rem;
    }

    .fs-description {
    color: var(--color-text-header);
    display: block;
    font-size: 1rem;
    line-height: 1.25rem;
    }

    .fs-button-group {
    display: flex;
    flex-direction: row-reverse;
    column-gap: 1.5rem;
    }

    .fs-form:where(.fs-layout__2-column) .fs-button-group {
    grid-column: 1 / -1;
    }

    .fs-button {
    background-color: var(--color-primary);
    border-radius: 9999px;
    color: white;
    cursor: pointer;
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.5rem;
    padding: 0.75rem 2rem;
    transition-duration: 200ms;
    transition-property: background-color;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }

    .fs-button:hover {
    background-color: var(--color-primary-active);
    }

    .fs-button:focus-visible {
    background-color: var(--color-primary-active);
    outline: 4px solid var(--color-highlight);
    }

    .fs-input,
    .fs-select {
    appearance: none;
    border-radius: 9999px;
    border-width: 0;
    box-shadow: var(--color-border-default) 0 0 0 1px inset;
    color: var(--color-text-header);
    font-size: 1rem;
    height: 3rem;
    line-height: 1.5rem;
    outline: none;
    padding-left: 1rem;
    padding-right: 1rem;
    }

    .fs-input:focus-visible,
    .fs-select:focus-visible {
    box-shadow: var(--color-border-active) 0 0 0 1px inset;
    }

    .fs-input::placeholder {
    color: var(--color-text-muted);
    }

    .fs-checkbox-group,
    .fs-radio-group {
    display: flex;
    flex-direction: column;
    row-gap: 1rem;
    }

    .fs-checkbox-field,
    .fs-radio-field {
    column-gap: 0.5rem;
    display: flex;
    }

    :is(.fs-checkbox-field, .fs-radio-field) .fs-label + .fs-description {
    margin-top: 0.25rem;
    }

    .fs-checkbox-wrapper,
    .fs-radio-wrapper {
    align-items: center;
    display: flex;
    height: 1.25rem;
    }

    .fs-checkbox,
    .fs-radio {
    background-color: #fff;
    border: 1px solid var(--color-border-default);
    height: 1.25rem;
    width: 1.25rem;
    }

    .fs-checkbox {
    border-radius: 0.25rem;
    }

    .fs-radio {
    border-radius: 100%;
    }

    .fs-checkbox:checked,
    .fs-radio:checked {
    background-color: var(--color-primary);
    background-position: center;
    background-repeat: no-repeat;
    background-size: 100% 100%;
    border-color: transparent;
    }

    .fs-checkbox:checked {
    background-image: url(&#34;data:image/svg+xml,%3csvg viewBox=&#39;0 0 16 16&#39; fill=&#39;white&#39; xmlns=&#39;http://www.w3.org/2000/svg&#39;%3e%3cpath d=&#39;M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z&#39;/%3e%3c/svg%3e&#34;);
    }

    .fs-radio:checked {
    background-image: url(&#34;data:image/svg+xml,%3csvg viewBox=&#39;0 0 16 16&#39; fill=&#39;white&#39; xmlns=&#39;http://www.w3.org/2000/svg&#39;%3e%3ccircle cx=&#39;8&#39; cy=&#39;8&#39; r=&#39;3&#39;/%3e%3c/svg%3e&#34;);
    }

    .fs-checkbox:focus-visible,
    .fs-radio:focus-visible {
    border-color: var(--color-border-active);
    outline: 4px solid var(--color-highlight);
    outline-offset: 0;
    }

    .fs-checkbox:checked:focus-visible,
    .fs-radio:checked:focus-visible {
    border-color: transparent;
    }

    .fs-select {
    background-color: #fff;
    background-image: url(&#34;data:image/svg+xml,%3csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; fill=&#39;none&#39; viewBox=&#39;0 0 20 20&#39;%3e%3cpath stroke=&#39;%236b7280&#39; stroke-linecap=&#39;round&#39; stroke-linejoin=&#39;round&#39; stroke-width=&#39;1.5&#39; d=&#39;M6 8l4 4 4-4&#39;/%3e%3c/svg%3e&#34;);
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.625em 1.625em;
    padding-right: 2.875rem;
    }

    .fs-slider {
    background: transparent;
    cursor: pointer;
    height: 1.25rem;
    width: 100%;
    }

    .fs-slider::-moz-range-track {
    background-color: var(--color-background);
    border-radius: 0.5rem;
    height: 0.5rem;
    }

    .fs-slider::-webkit-slider-runnable-track {
    background-color: var(--color-background);
    border-radius: 0.5rem;
    height: 0.5rem;
    }

    .fs-slider::-moz-range-thumb {
    background-color: var(--color-primary);
    border: none; /* Removes extra border that FF applies */
    border-radius: 50%;
    height: 1.25rem;
    width: 1.25rem;
    }

    .fs-slider::-webkit-slider-thumb {
    appearance: none;
    background-color: var(--color-primary);
    border-radius: 50%;
    height: 1.25rem;
    margin-top: -0.375rem; /* Centers thumb on the track */
    width: 1.25rem;
    }

    .fs-slider:focus-visible::-moz-range-thumb {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
    }

    .fs-slider:focus-visible::-webkit-slider-thumb {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
    }

    .fs-switch {
    background-color: var(--color-background-alt);
    background-image: url(&#34;data:image/svg+xml,%3csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;-4 -4 8 8&#39;%3e%3ccircle r=&#39;2.75&#39; fill=&#39;white&#39;/%3e%3c/svg%3e&#34;);
    background-position: left center;
    background-repeat: no-repeat;
    border-radius: 1.25rem;
    cursor: pointer;
    height: 1.25rem;
    transition-duration: 200ms;
    transition-property: background-color, background-position;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    width: 2.5rem;
    }

    .fs-switch:checked {
    background-color: var(--color-primary);
    background-position: right center;
    }

    .fs-switch:focus-visible {
    outline: 4px solid var(--color-highlight);
    outline-offset: 0;
    }

    .fs-textarea {
    appearance: none;
    border-radius: 0.75rem;
    border-width: 0;
    box-shadow: var(--color-border-default) 0 0 0 1px inset;
    color: var(--color-text-header);
    font-size: 1rem;
    line-height: 1.5rem;
    outline: none;
    padding: 0.5rem 0.75rem;
    resize: vertical;
    }

    .fs-textarea:focus-visible {
    box-shadow: var(--color-border-active) 0 0 0 1px inset;
    }

    .fs-textarea::placeholder {
    color: var(--color-text-muted);
    }

    /** Utilities **/

    .col-span-full {
    grid-column: 1 / -1;
    }

    .fs-textarea::placeholder {
    color: var(--color-text-muted);
    }

    .slider-label-container {
    display: flex;
    justify-content: space-between;
    width: 100%;
    margin-top: 0.25rem;
    }

    .slider-label-text {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    text-align: center;
    white-space: nowrap;
    }
&lt;/style&gt;
&lt;form
action=&#34;https://formspree.io/f/xpwdvayq&#34;
class=&#34;fs-form&#34;
target=&#34;_top&#34;
method=&#34;POST&#34;
&gt;
&lt;div class=&#34;fs-field&#34;&gt;
  &lt;label class=&#34;fs-label&#34; for=&#34;name&#34;&gt;&lt;h3&gt;Your Name&lt;/h3&gt;&lt;/label&gt;
  &lt;input class=&#34;fs-input&#34; id=&#34;name&#34; name=&#34;name&#34; required /&gt;
&lt;/div&gt;
&lt;div class=&#34;fs-field&#34;&gt;
  &lt;label class=&#34;fs-label&#34; for=&#34;email&#34;&gt;&lt;h3&gt;Email&lt;/h3&gt;&lt;/label&gt;
  &lt;input class=&#34;fs-input&#34; id=&#34;email&#34; name=&#34;email&#34; required /&gt;
  &lt;p class=&#34;fs-description&#34;&gt;
    This will help me respond to your query via an email.
  &lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://www.minjunjeon.com/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/resume/</guid>
      <description>&lt;style&gt;
    #theme-toggle,
    .top-link {
        display: none;
    }
    .resume {
        /* position: relative;
        height: calc(90vh - var(--header-height) - var(--footer-height));
        max-width: calc(var(--main-width) + var(--gap) * 10);
        margin: auto;
        padding: var(--gap); text-align: center; */
        height: 70vh;
    }
&lt;/style&gt;
&lt;object data=&#34;/assets/Minjun_Jeon_CV_DPhil_quantum.pdf&#34; type=&#34;application/pdf&#34; width=&#34;100%&#34; height=&#34;100%&#34; class=&#34;resume&#34;&gt;
    &lt;p&gt;This PDF cannot be displayed. &lt;a href=&#34;https://www.minjunjeon.com/assets/Minjun_Jeon_CV_DPhil_quantum.pdf&#34; download&gt;Download it here&lt;/a&gt;.&lt;/p&gt;
  &lt;/object&gt;</description>
    </item>
    <item>
      <title>About me</title>
      <link>https://www.minjunjeon.com/about_me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.minjunjeon.com/about_me/</guid>
      <description>&lt;p&gt;Hi there! I&amp;rsquo;m currently in the third year of my DPhil (PhD) in Quantum Computing at the University of Oxford. Over the past few years, I&amp;rsquo;ve spent a lot of time writing Python code — from simulating quantum dots to building machine learning models for quantum devices. Through it all, I’ve realized how much I enjoy working with data and building software that actually &lt;em&gt;works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I’m now shifting gears toward the world of &lt;strong&gt;data engineering&lt;/strong&gt; and &lt;strong&gt;data science&lt;/strong&gt;, where I hope to keep solving real problems with code, just in a different context.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
